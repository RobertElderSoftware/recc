/*
	Copyright 2015 Robert Elder Software Inc.  All rights reserved.

	This software is not currently available under any license, and unauthorized use
	or copying is not permitted.

	This software will likely be available under a common open source license in the
	near future.  Licensing is currently pending feedback from a lawyer.  If you have
	an opinion on this subject you can send it to recc [at] robertelder.org.

	This program comes with ABSOLUTELY NO WARRANTY.  In no event shall Robert Elder
	Software Inc. be liable for incidental or consequential damages in connection with
	use of this software.
*/

#include "T0_IDENTIFIER_stack.h"

void T0_IDENTIFIER_stack_push(struct T0_IDENTIFIER_stack * stack, T0_LITERAL item){
	binary_exponential_buffer_increment(&stack->buffer, 1);
	((T0_LITERAL *)binary_exponential_buffer_data(&stack->buffer))[binary_exponential_buffer_size(&stack->buffer) -1] = item;
}

T0_LITERAL T0_IDENTIFIER_stack_pop(struct T0_IDENTIFIER_stack * stack){
	unsigned int stack_size = binary_exponential_buffer_size(&stack->buffer);
	T0_LITERAL rtn;
	assert(stack_size && "Attempting to pop an empty stack.");
	rtn = ((T0_LITERAL *)binary_exponential_buffer_data(&stack->buffer))[stack_size -1];
	binary_exponential_buffer_decrement(&stack->buffer, 1);
	return rtn;
}

unsigned int T0_IDENTIFIER_stack_size(struct T0_IDENTIFIER_stack * stack){
	return binary_exponential_buffer_size(&stack->buffer);
}

void T0_IDENTIFIER_stack_destroy(struct T0_IDENTIFIER_stack * stack){
	binary_exponential_buffer_destroy(&stack->buffer);
}

void T0_IDENTIFIER_stack_create(struct T0_IDENTIFIER_stack * stack){
	binary_exponential_buffer_create(&stack->buffer, sizeof(T0_LITERAL));
}

struct T0_IDENTIFIER_stack T0_IDENTIFIER_stack_copy(struct T0_IDENTIFIER_stack * stack){
	struct T0_IDENTIFIER_stack copy;
	copy.buffer = binary_exponential_buffer_copy(&stack->buffer);
	return copy;
}
