/*
	Copyright 2014 Robert Elder Software Inc.  All rights reserved.

	This software is not currently available under any license, and unauthorized use
	or copying is not permitted.

	This software will likely be available under a common open source license in the
	near future.  Licensing is currently pending feedback from a lawyer.  If you have
	an opinion on this subject you can send it to recc [at] robertelder.org.

	This program comes with ABSOLUTELY NO WARRANTY.  In no event shall Robert Elder
	Software Inc. be liable for incidental or consequential damages in connection with
	use of this software.
*/

#include "GENERIC_TYPE0_IDENTIFIER_FRIENDLY_list.h"

void GENERIC_TYPE0_IDENTIFIER_FRIENDLY_list_add(struct GENERIC_TYPE0_IDENTIFIER_FRIENDLY_list * list, GENERIC_TYPE0_LITERAL item){
	binary_exponential_buffer_increment(&list->buffer, 1);
	((GENERIC_TYPE0_LITERAL *)binary_exponential_buffer_data(&list->buffer))[binary_exponential_buffer_size(&list->buffer) -1] = item;
}

GENERIC_TYPE0_LITERAL GENERIC_TYPE0_IDENTIFIER_FRIENDLY_list_pop(struct GENERIC_TYPE0_IDENTIFIER_FRIENDLY_list * list){
	GENERIC_TYPE0_LITERAL rtn = *((GENERIC_TYPE0_LITERAL *)binary_exponential_buffer_get(&list->buffer, binary_exponential_buffer_size(&list->buffer) -1));
	binary_exponential_buffer_decrement(&list->buffer, 1);
	return rtn;
}

void GENERIC_TYPE0_IDENTIFIER_FRIENDLY_list_remove_all(struct GENERIC_TYPE0_IDENTIFIER_FRIENDLY_list * list, GENERIC_TYPE0_LITERAL item){
	/* Remove all instances of item from the list */
	unsigned int i = 0;
	unsigned int old_i = 0;
	unsigned int new_i = 0;
	unsigned int oc = GENERIC_TYPE0_IDENTIFIER_FRIENDLY_list_occurrences(list, item);
	GENERIC_TYPE0_LITERAL * data = binary_exponential_buffer_data(&list->buffer);

	for(i = 0; i < binary_exponential_buffer_size(&list->buffer); i++){
		if(data[i] != item){
			data[new_i] = data[old_i];
			new_i++;
		}
		old_i++;
	}

	binary_exponential_buffer_decrement(&list->buffer, old_i - new_i);
	assert(oc == (old_i - new_i));
}

unsigned int GENERIC_TYPE0_IDENTIFIER_FRIENDLY_list_occurrences(struct GENERIC_TYPE0_IDENTIFIER_FRIENDLY_list * list, GENERIC_TYPE0_LITERAL item){
	unsigned int i;
	unsigned int occurrences = 0;
	for(i = 0; i < binary_exponential_buffer_size(&list->buffer); i++){
		if((*((GENERIC_TYPE0_LITERAL *)binary_exponential_buffer_get(&list->buffer, i))) == item){
			occurrences++;
		}
	}
	return occurrences;
}

GENERIC_TYPE0_LITERAL GENERIC_TYPE0_IDENTIFIER_FRIENDLY_list_get(struct GENERIC_TYPE0_IDENTIFIER_FRIENDLY_list * list, unsigned int i){
	assert(i < binary_exponential_buffer_size(&list->buffer));
	return *((GENERIC_TYPE0_LITERAL *)binary_exponential_buffer_get(&list->buffer, i));
}

unsigned int GENERIC_TYPE0_IDENTIFIER_FRIENDLY_list_size(struct GENERIC_TYPE0_IDENTIFIER_FRIENDLY_list * list){
	return binary_exponential_buffer_size(&list->buffer);
}

GENERIC_TYPE0_LITERAL * GENERIC_TYPE0_IDENTIFIER_FRIENDLY_list_data(struct GENERIC_TYPE0_IDENTIFIER_FRIENDLY_list * list){
	return ((GENERIC_TYPE0_LITERAL *)binary_exponential_buffer_data(&list->buffer));
}

void GENERIC_TYPE0_IDENTIFIER_FRIENDLY_list_destroy(struct GENERIC_TYPE0_IDENTIFIER_FRIENDLY_list * list){
	binary_exponential_buffer_destroy(&list->buffer);
}

void GENERIC_TYPE0_IDENTIFIER_FRIENDLY_list_create(struct GENERIC_TYPE0_IDENTIFIER_FRIENDLY_list * list){
	binary_exponential_buffer_create(&list->buffer, sizeof(GENERIC_TYPE0_LITERAL));
}

struct GENERIC_TYPE0_IDENTIFIER_FRIENDLY_list GENERIC_TYPE0_IDENTIFIER_FRIENDLY_list_copy(struct GENERIC_TYPE0_IDENTIFIER_FRIENDLY_list * list){
	struct GENERIC_TYPE0_IDENTIFIER_FRIENDLY_list copy;
	copy.buffer = binary_exponential_buffer_copy(&list->buffer);
	return copy;
}
