#ifndef __T0_IDENTIFIER_to_T1_IDENTIFIER_map__H__DEFINED__
#define __T0_IDENTIFIER_to_T1_IDENTIFIER_map__H__DEFINED__
/*
	Copyright 2015 Robert Elder Software Inc.  All rights reserved.

	This software is not currently available under any license, and unauthorized use
	or copying is not permitted.

	This software will likely be available under a common open source license in the
	near future.  Licensing is currently pending feedback from a lawyer.  If you have
	an opinion on this subject you can send it to recc [at] robertelder.org.

	This program comes with ABSOLUTELY NO WARRANTY.  In no event shall Robert Elder
	Software Inc. be liable for incidental or consequential damages in connection with
	use of this software.
*/

#ifndef __ASSERT_H_DEFINED__
#include <assert.h>
#endif
#ifndef __BINARY_EXPONENTIAL_BUFFER__H__DEFINED__
#include "binary_exponential_buffer.h"
#endif
#ifndef __CORE_DATA_TYPES__H__DEFINED__
#include "../core_data_types.h"
#endif
#ifndef __struct_T0_IDENTIFIER_to_T1_IDENTIFIER_key_value_pair_ptr_merge_sort__H__DEFINED__
#include "struct_T0_IDENTIFIER_to_T1_IDENTIFIER_key_value_pair_ptr_merge_sort.h"
#endif
#ifndef __struct_T0_IDENTIFIER_to_T1_IDENTIFIER_key_value_pair_ptr_binary_search__H__DEFINED__
#include "struct_T0_IDENTIFIER_to_T1_IDENTIFIER_key_value_pair_ptr_binary_search.h"
#endif
#ifndef __T0_IDENTIFIER_compare__H__DEFINED__
#include "T0_IDENTIFIER_compare.h"
#endif
#ifndef __T0_IDENTIFIER_list__H__DEFINED__
#include "T0_IDENTIFIER_list.h"
#endif
#ifndef __T1_IDENTIFIER_list__H__DEFINED__
#include "T1_IDENTIFIER_list.h"
#endif

struct T0_IDENTIFIER_to_T1_IDENTIFIER_key_value_pair{
	T0_LITERAL key;
	T1_LITERAL value;
};

struct T0_IDENTIFIER_to_T1_IDENTIFIER_map{
	struct binary_exponential_buffer key_value_pairs;
	int (*compare)(T0_LITERAL, T0_LITERAL);
};


unsigned int T0_IDENTIFIER_to_T1_IDENTIFIER_map_exists(struct T0_IDENTIFIER_to_T1_IDENTIFIER_map *, T0_LITERAL);
int struct_T0_IDENTIFIER_to_T1_IDENTIFIER_key_value_pair_ptr_compare(struct T0_IDENTIFIER_to_T1_IDENTIFIER_key_value_pair **, struct T0_IDENTIFIER_to_T1_IDENTIFIER_key_value_pair **);
void T0_IDENTIFIER_to_T1_IDENTIFIER_map_create(struct T0_IDENTIFIER_to_T1_IDENTIFIER_map *);
void T0_IDENTIFIER_to_T1_IDENTIFIER_map_destroy(struct T0_IDENTIFIER_to_T1_IDENTIFIER_map *);
void T0_IDENTIFIER_to_T1_IDENTIFIER_map_put(struct T0_IDENTIFIER_to_T1_IDENTIFIER_map *, T0_LITERAL, T1_LITERAL);
T1_LITERAL T0_IDENTIFIER_to_T1_IDENTIFIER_map_get(struct T0_IDENTIFIER_to_T1_IDENTIFIER_map *, T0_LITERAL);
struct T0_IDENTIFIER_list T0_IDENTIFIER_to_T1_IDENTIFIER_map_keys(struct T0_IDENTIFIER_to_T1_IDENTIFIER_map *);
struct T1_IDENTIFIER_list T0_IDENTIFIER_to_T1_IDENTIFIER_map_values(struct T0_IDENTIFIER_to_T1_IDENTIFIER_map *);
unsigned int T0_IDENTIFIER_to_T1_IDENTIFIER_map_size(struct T0_IDENTIFIER_to_T1_IDENTIFIER_map *);
void T0_IDENTIFIER_to_T1_IDENTIFIER_map_remove(struct T0_IDENTIFIER_to_T1_IDENTIFIER_map *, T0_LITERAL);
struct T0_IDENTIFIER_to_T1_IDENTIFIER_map T0_IDENTIFIER_to_T1_IDENTIFIER_map_copy(struct T0_IDENTIFIER_to_T1_IDENTIFIER_map *);

#endif
