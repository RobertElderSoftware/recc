/*
	Copyright 2015 Robert Elder Software Inc.  All rights reserved.

	This software is not currently available under any license, and unauthorized use
	or copying is not permitted.

	This software will likely be available under a common open source license in the
	near future.  Licensing is currently pending feedback from a lawyer.  If you have
	an opinion on this subject you can send it to recc [at] robertelder.org.

	This program comes with ABSOLUTELY NO WARRANTY.  In no event shall Robert Elder
	Software Inc. be liable for incidental or consequential damages in connection with
	use of this software.
*/

#include "T0_IDENTIFIER_to_T1_IDENTIFIER_map.h"

void T0_IDENTIFIER_to_T1_IDENTIFIER_map_create(struct T0_IDENTIFIER_to_T1_IDENTIFIER_map * map, int (*f)(T0_LITERAL, T0_LITERAL)){
	binary_exponential_buffer_create(&map->key_value_pairs, sizeof(struct T0_IDENTIFIER_to_T1_IDENTIFIER_key_value_pair));
	map->compare = f;
}

void T0_IDENTIFIER_to_T1_IDENTIFIER_map_destroy(struct T0_IDENTIFIER_to_T1_IDENTIFIER_map * map){
	binary_exponential_buffer_destroy(&map->key_value_pairs);
}

void T0_IDENTIFIER_to_T1_IDENTIFIER_map_put(struct T0_IDENTIFIER_to_T1_IDENTIFIER_map * map, T0_LITERAL key, T1_LITERAL value){
	struct T0_IDENTIFIER_to_T1_IDENTIFIER_key_value_pair kvp;
	kvp.key = key;
	kvp.value = value;
	binary_exponential_buffer_increment(&map->key_value_pairs, 1);
	((struct T0_IDENTIFIER_to_T1_IDENTIFIER_key_value_pair *)binary_exponential_buffer_data(&map->key_value_pairs))[binary_exponential_buffer_size(&map->key_value_pairs) -1] = kvp;
}

T1_LITERAL T0_IDENTIFIER_to_T1_IDENTIFIER_map_get(struct T0_IDENTIFIER_to_T1_IDENTIFIER_map * map, T0_LITERAL key){
	unsigned int size = binary_exponential_buffer_size(&map->key_value_pairs);
	unsigned int i;
	struct T0_IDENTIFIER_to_T1_IDENTIFIER_key_value_pair * data = (struct T0_IDENTIFIER_to_T1_IDENTIFIER_key_value_pair *)binary_exponential_buffer_data(&map->key_value_pairs);
	for(i = 0; i < size; i++){
		if(!map->compare(key, data[i].key)){
			return data[i].value;
		}
	}
	return 0;
}

struct T0_IDENTIFIER_to_T1_IDENTIFIER_map T0_IDENTIFIER_to_T1_IDENTIFIER_map_copy(struct T0_IDENTIFIER_to_T1_IDENTIFIER_map * map){
	struct T0_IDENTIFIER_to_T1_IDENTIFIER_map copy;
	copy.key_value_pairs = binary_exponential_buffer_copy(&map->key_value_pairs);
	copy.compare = map->compare;
	return copy;
}

struct T0_IDENTIFIER_list T0_IDENTIFIER_to_T1_IDENTIFIER_map_keys(struct T0_IDENTIFIER_to_T1_IDENTIFIER_map * map){
	struct T0_IDENTIFIER_list rtn;
	unsigned int size = binary_exponential_buffer_size(&map->key_value_pairs);
	unsigned int i;
	struct T0_IDENTIFIER_to_T1_IDENTIFIER_key_value_pair * data = (struct T0_IDENTIFIER_to_T1_IDENTIFIER_key_value_pair *)binary_exponential_buffer_data(&map->key_value_pairs);
	T0_IDENTIFIER_list_create(&rtn);
	for(i = 0; i < size; i++){
		T0_IDENTIFIER_list_add_end(&rtn, data[i].key);
	}
	return rtn;
}

struct T1_IDENTIFIER_list T0_IDENTIFIER_to_T1_IDENTIFIER_map_values(struct T0_IDENTIFIER_to_T1_IDENTIFIER_map * map){
	struct T1_IDENTIFIER_list rtn;
	unsigned int size = binary_exponential_buffer_size(&map->key_value_pairs);
	unsigned int i;
	struct T0_IDENTIFIER_to_T1_IDENTIFIER_key_value_pair * data = (struct T0_IDENTIFIER_to_T1_IDENTIFIER_key_value_pair *)binary_exponential_buffer_data(&map->key_value_pairs);
	T1_IDENTIFIER_list_create(&rtn);
	for(i = 0; i < size; i++){
		T1_IDENTIFIER_list_add_end(&rtn, data[i].value);
	}
	return rtn;
}

unsigned int T0_IDENTIFIER_to_T1_IDENTIFIER_map_size(struct T0_IDENTIFIER_to_T1_IDENTIFIER_map * map){
	return binary_exponential_buffer_size(&map->key_value_pairs);
}

void T0_IDENTIFIER_to_T1_IDENTIFIER_map_remove(struct T0_IDENTIFIER_to_T1_IDENTIFIER_map * map, T0_LITERAL key){
	/* Remove key value pair with key item from map */
	unsigned int i = 0;
	unsigned int old_i = 0;
	unsigned int new_i = 0;
	struct T0_IDENTIFIER_to_T1_IDENTIFIER_key_value_pair * data = (struct T0_IDENTIFIER_to_T1_IDENTIFIER_key_value_pair *)binary_exponential_buffer_data(&map->key_value_pairs);

	for(i = 0; i < binary_exponential_buffer_size(&map->key_value_pairs); i++){
		if(map->compare(key, data[i].key)){
			data[new_i] = data[old_i];
			new_i++;
		}
		old_i++;
	}

	binary_exponential_buffer_decrement(&map->key_value_pairs, old_i - new_i);
}
