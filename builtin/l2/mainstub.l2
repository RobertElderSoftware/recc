;
;                This code represents the very first code that is executed,
;                and is responsible for calling the main method and halting
;                the processor when returning from main.
OFFSET 0x0
FUNCTION _g_entry _end_g_entry
IMPLEMENTS, REQUIRES EXTERNAL exitmain
IMPLEMENTS EXTERNAL _g_entry
IMPLEMENTS EXTERNAL _end_g_entry
REQUIRES EXTERNAL main
REQUIRES EXTERNAL _end_globalvar__g_builtin_stack
_g_entry:
add SP PC ZR;    Copy current PC
beq ZR ZR 1;     Jump over next word
DW _end_globalvar__g_builtin_stack;  Address of the start of the stack
add SP SP WR;    Adjust the copied PC value to point at the word to load
loa SP SP;       Load the value of the stack pointer into SP
sub SP SP WR;    Adjust position of stack to point inside stack region
sub SP SP WR;    Space for return value (int)
add r1 PC ZR;
beq ZR ZR 1;
DW exitmain;     Load the address of the exit routine.
add r1 r1 WR;
loa r1 r1;
sto SP r1;       Store the return address on the stack.
sub SP SP WR;    Move up to frame pointer
add FP SP ZR;    Copy the stack pointer into the frame pointer.
sto SP ZR;       There is no previous frame, so just store 0.
beq ZR ZR main;  Branch to main method.
exitmain:
;                This will halt the processor
ll r1 0x1;
add FR FR r1;
_end_g_entry:
