OFFSET RELOCATABLE
IMPLEMENTS EXTERNAL putchar_nobusy
putchar_nobusy:
;  Move over the pointer of the first argument
add SP SP WR;  We're now pointing at the *value* of the first arg
loa r2 SP;  Load whatever that argument was.
sub SP SP WR;  We're again pointing at the *ptr* of the first arg
;  The bit mask for UART1_OUT ready
ll r3 0x200;
;  The address of UART1_OUT
ll r5 0x300000;
;  Put the byte
sto r5 r2;
;  Create a mask to unset the UART1_OUT ready bit
not r7 r3;
;  Apply the mask to unset the UART1_OUT ready bit
and FR FR r7;
;  Increment the stack pointer to get over the one argument
;  that is a 4 byte integer and its pointer
add SP SP WR;
add SP SP WR;
;  Load the previous frame pointer
loa FP SP;
;  Jump over the frame pointer to get to the return address
add SP SP WR;
;  Load the return address
loa r1 SP;
;  Jump over the return address, which points us at the return address space (an int)
add SP SP WR;
;  Jump back to the place where the function was called
add PC ZR r1;
