#  Copyright 2015 Robert Elder Software Inc.  All rights reserved.
#
#  This specification is not currently available under any license, and unauthorized use or copying is not
#  permitted.
#
#  This specification will likely be available under a common open source license in the near future.
#  Licensing is currently pending feedback from a lawyer.  If you have an opinion on the subject you can
#  send it to recc [at] robertelder.org.
#
#  This specification comes with ABSOLUTELY NO WARRANTY.  In no event shall Robert Elder Software Inc. be
#  liable for incidental or consequential damages in connection with use of this specification.

                                                     One-Page CPU

+-----------------+<--------+----32-bits----------------->+--------------------------------------------------+
|                 |<5-bits >|<----------27-bits---------->|                                                  |
|    Assembly     |  Ctrl   |          Data Layout        |                  Description                     |
+-----------------+---------+-----------------------------+--------------------------------------------------+
| add rX rY rZ    |  00000  | XXXXXXXXXYYYYYYYYYZZZZZZZZZ | rX = rY + rZ (32-bit unsigned)                   |
| sub rX rY rZ    |  00001  | XXXXXXXXXYYYYYYYYYZZZZZZZZZ | rX = rY - rZ (32-bit unsigned)                   |
| mul rX rY rZ    |  00010  | XXXXXXXXXYYYYYYYYYZZZZZZZZZ | rX = rY * rZ (32-bit unsigned) Low 32 bit result |
| div rX rY rZ    |  00011  | XXXXXXXXXYYYYYYYYYZZZZZZZZZ | rX = rY / rZ (32-bit unsigned) See DIV_ZERO flag |
| and rX rY rZ    |  00100  | XXXXXXXXXYYYYYYYYYZZZZZZZZZ | rX = rY & rZ (bitwise logical and)               |
| or rX rY rZ     |  00101  | XXXXXXXXXYYYYYYYYYZZZZZZZZZ | rX = rY | rZ (bitwise logical or)                |
| not rX rY       |  00110  | XXXXXXXXXYYYYYYYYY--------- | rX = ~rY (bitwise logical not)                   |
| loa rX rY       |  00111  | XXXXXXXXXYYYYYYYYY--------- | Load contents of memory location rY into rX      |
| sto rX rY       |  01000  | XXXXXXXXXYYYYYYYYY--------- | Store contents of rY at memory location in rX    |
| shr rX rY       |  01001  | XXXXXXXXXYYYYYYYYY--------- | rX = (rX logical shift rY bits to the right)     |
| shl rX rY       |  01010  | XXXXXXXXXYYYYYYYYY--------- | rX = (rX logical shift rY bits to the left)      |
| beq rX rY i     |  01011  | XXXXXXXXXYYYYYYYYYiiiiiiiii | PC = PC + i * 4 if rX == rY (i is 9-bit signed)  |
| blt rX rY i     |  01100  | XXXXXXXXXYYYYYYYYYiiiiiiiii | PC = PC + i * 4 if rX < rY (i is 9-bit signed)   |
| ll rX 0xN       |  01101  | XXXXXXXXX--NNNNNNNNNNNNNNNN | load literal 16 bits into rX; high bits set to 0 |
+-----------------+---------+-----------------------------+--------------------------------------------------+

At CPU startup, WR = 0x4, FR = 0x200.  All other registers are initialized to 0.

#0)  PC (Program Counter)  Points to next instruction.           #3)  ZR (Zero Register)   Initialized to 0.
#1)  SP (Stack Pointer)    Points to the top item on the stack.  #4)  FR (Flags Register)  Special CPU flags.
#2)  FP (Frame Pointer)    Points to previous frame pointer.     #5)  WR (Word Register)   Initialized to 4.

Special registers #0 to #5 are PC, SP, FP, ZR, FR, WR.  General registers #6 to #512 are named r1 to r506.

Flags Register (FR) Description

Bit 0:     Writing one to this bit halts the processor.  No further instructions or interrupts execute.
Bit 1:     Global Interrupt Enable.  All interrupts enabled when 1.  All interrupts disabled otherwise.
Bit 2:     When set to 1, atomically sets bit 1 of FR to 1, bit 2 of FR to 0, PC to [SP], and SP to SP + WR.
Bit 3:     TIMER1 interrupt enable.  See TIMER1_PERIOD.
Bit 4:     TIMER1 interrupt asserted.  CPU sets to 1.  User must set to 0.
Bit 5:     UART1_OUT interrupt enable.  Used for detecting when bit 9 of FR has been set by CPU.
Bit 6:     UART1_OUT interrupt asserted.  CPU sets to 1.  User must set to 0.
Bit 7:     UART1_IN interrupt enable.  Used for detecting when bit 10 of FR has been set by CPU.
Bit 8:     UART1_IN interrupt asserted.  CPU sets to 1.  User must set to 0.
Bit 9:     UART1_OUT ready.  Indicates whether UART1_OUT is ready.  CPU sets to 1.  User must set 0.
Bit 10:    UART1_IN ready.  Indicates whether UART1_IN contains input data.  CPU sets to 1.  User must set 0.
Bit 11:    DIV_ZERO interrupt asserted due to a division by 0.  CPU sets to 1.  User must set to 0.
Bit 12-31  Unused.

Out of memory, or non 4 byte aligned access asserts bit 0 of FR.  Initial memory contents are undefined.

Memory Mapped (4 byte) Registers.  Initialized to 0 at startup:

0x300000 UART1_OUT      After bytes located here are read by peripheral, the CPU sets bit 9 of FR to 1.
0x300010 UART1_IN       Input from peripheral is stored at this address, the CPU sets bit 10 of FR to 1.
0x300020 IRQ_HANDLER    The 4 byte address of the global interrupt handler function.
0x300030 TIMER1_PERIOD  Assert TIMER1 interrupt when (# instructions executed) mod TIMER1_PERIOD == 0

An interrupt is initiated (branches to IRQ_HANDLER) only when all 3 of the following are true:
1) Bit 1 of FR is set.
2) The respective interrupt enable bit (bit 3, 5, or 7 of FR) is set.
3) The respective interrupt asserted bit (bit 4, 6, or 8 of FR) is set.

A CPU initiated interrupt atomically sets bit 1 of FR to 0, SP to SP - WR and [SP] to PC, then PC to
IRQ_HANDLER.  At least one cycle occurs between a branch due to bit 2 being set, and a branch to IRQ_Handler.

The sha1sum of the lines above is 177c65244df640f7e5f3ac7025d961599121dac8
